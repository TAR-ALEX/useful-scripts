#!/bin/python3

# Get Video Screenshots Script
#
# This script extracts screenshots from all .mp4 files in a specified directory using multiple threads.
# The screenshots are saved to another directory with the same name as the original video file, 
# followed by a timestamp.

import os
import subprocess
import argparse
from concurrent.futures import ThreadPoolExecutor

def extract_screenshots(video_path, destination_folder, interval, scale):
    video_name = os.path.splitext(os.path.basename(video_path))[0]
    scaleCmd = f',scale={scale}:-1'
    if scale <= 0 :
        scaleCmd = ''
    ffmpeg_command = [
        'ffmpeg', '-i', video_path, '-vf', f'fps=1/{interval}{scaleCmd}', 
        os.path.join(destination_folder, f'{video_name}-%04d.jpeg')
    ]
    subprocess.run(ffmpeg_command)

def process_videos(source_folder, destination_folder, interval, scale, max_threads):
    # Create the destination folder if it doesn't exist
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)

    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        for root, dirs, files in os.walk(source_folder):
            for file in files:
                if file.lower().endswith('.mp4'):
                    video_path = os.path.join(root, file)
                    executor.submit(extract_screenshots, video_path, destination_folder, interval, scale)

def main():
    parser = argparse.ArgumentParser(description='Extract screenshots from all .mp4 files in a directory using multiple threads.')
    parser.add_argument('source_dir', help='Path to the source directory containing MP4 files.')
    parser.add_argument('destination_dir', help='Path to the destination directory where screenshots will be saved.')
    parser.add_argument('--interval', type=int, default=20, help='Interval between screenshots in seconds.')
    parser.add_argument('--scale', type=int, default=0, help='Scale the images to this width (height proportional), 0 or -1 is keep original.')
    parser.add_argument('--threads', type=int, default=4, help='Maximum number of threads to use for processing videos.')
    args = parser.parse_args()
    process_videos(args.source_dir, args.destination_dir, args.interval, args.scale, args.threads)

if __name__ == "__main__":
    main()

